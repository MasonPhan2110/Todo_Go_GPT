// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: todo.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "todo" (
    "user_id",
    "name",
    "description",
    "status",
    "deadline"
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, name, description, status, deadline, update_at, created_at
`

type CreateTaskParams struct {
	UserID      int64          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Status      bool           `json:"status"`
	Deadline    time.Time      `json:"deadline"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.Deadline,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM todo
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, user_id, name, description, status, deadline, update_at, created_at FROM todo
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskForUpdate = `-- name: GetTaskForUpdate :one
SELECT id, user_id, name, description, status, deadline, update_at, created_at FROM todo
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTaskForUpdate(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTaskForUpdate, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, user_id, name, description, status, deadline, update_at, created_at FROM todo
WHERE "user_id" = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTasksParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Deadline,
			&i.UpdateAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeadline = `-- name: UpdateDeadline :one
UPDATE todo
SET deadline = $2
WHERE id = $1
RETURNING id, user_id, name, description, status, deadline, update_at, created_at
`

type UpdateDeadlineParams struct {
	ID       int64     `json:"id"`
	Deadline time.Time `json:"deadline"`
}

func (q *Queries) UpdateDeadline(ctx context.Context, arg UpdateDeadlineParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateDeadline, arg.ID, arg.Deadline)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateStatus = `-- name: UpdateStatus :one
UPDATE todo
SET status = $2
WHERE id = $1
RETURNING id, user_id, name, description, status, deadline, update_at, created_at
`

type UpdateStatusParams struct {
	ID     int64 `json:"id"`
	Status bool  `json:"status"`
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateStatus, arg.ID, arg.Status)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.UpdateAt,
		&i.CreatedAt,
	)
	return i, err
}
